# downgrade to v2 because it does not support anymore condition
# on 'depends_on'
version: '2.1'

services:

  db:
    image: postgres
    restart: always
    # volumes:
      # uncomment to maintan persistance
        #- ./postgresql/:/var/lib/postgresql/data/
      # uncomment to use init scripts on sql_scripts folder
      # - ./sql_scripts:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_PASSWORD: password_example
      POSTGRES_USER: user_example
      POSTGRES_DB: matchers
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # uncomment for development (access from host)
    ports:
      - 5432:5432

  redis:
    container_name: redis
    hostname: redis
    image: redis


  ## web ui for Postgres (alternative: DBeaver installed on OS)
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080


  ## web ui + cli to manage redis
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

  ## Postgres db migrations with Alembic
  migration:
    build: .
    image: matcher:staging
    command: alembic upgrade head
    # command: tail -F /dev/null
    environment:
      DB_URL: postgresql://user_example:password_example@db:5432/matchers
    links:
      - db
    depends_on:
      db:
        condition: service_healthy


  ## Logic to score the input and store and for testing using CLI
  matcher:
    image: matcher:staging
    build: .
    command: tail -F /dev/null
    links:
      - db
    environment:
      DB_URL: postgresql://user_example:password_example@db:5432/matchers
    depends_on:
      - migration


  ## Flask API to expose data
  matcher-api:
    image: matcher:staging
    entrypoint:
      - gunicorn
      - -b 0.0.0.0:5000
      - matcher.api:app
    links:
      - db
    environment:
      DB_URL: postgresql://user_example:password_example@db:5432/matchers
    ports:
      - 5000:5000
    depends_on:
      - migration

  ## Celery worker to process data
  matcher-celery:
    image: matcher:staging
    entrypoint:
      - celery
      - -A
      - matcher.celery_app
      - worker
      - --loglevel=info
    links:
      - redis
    environment:
      BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: db+postgresql://user_example:password_example@db:5432/matchers
    depends_on:
      - redis
      - migration


  ## web ui to manage Celery app
  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=8888
    links:
      - redis
    depends_on:
      - matcher-celery
    ports:
      - 8888:8888
